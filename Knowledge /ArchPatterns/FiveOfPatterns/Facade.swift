class CPU {
    func freeze() { }
    func jump(position: Int) { }
    func execute() { }
}

class Memory {
    func load(position: Int, data: [UInt8]) { }
}

class HardDrive {
    func read(lba: Int, size: Int) -> [UInt8] { return [] }
}

// –§–∞—Å–∞–¥
class ComputerFacade {
    private let cpu = CPU()
    private let memory = Memory()
    private let hardDrive = HardDrive()

    func start() {
        cpu.freeze()
        let data = hardDrive.read(lba: 0, size: 1024)
        memory.load(position: 0, data: data)
        cpu.jump(position: 0)
        cpu.execute()
    }
}

/*
 üëâ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
 –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫ —Å–ª–æ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–æ–≤.

 –§–∞—Å–∞–¥ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç¬ª –æ–±—ä–µ–∫—Ç, –∞ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ü–µ–ª—É—é —Å–∏—Å—Ç–µ–º—É.

 –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
     ‚Ä¢    –ù—É–∂–Ω–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã.
     ‚Ä¢    –ù—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (API) –∫ –º–Ω–æ–∂–µ—Å—Ç–≤—É –æ–±—ä–µ–∫—Ç–æ–≤.
 */
